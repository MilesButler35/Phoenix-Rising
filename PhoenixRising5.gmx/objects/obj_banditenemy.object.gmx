<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>SPR_BanditIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Speed = 5;
SpeedMod = 1;

MaxHP = 15;
CurrentHP = MaxHP;

OnGround = true;
GroundY = y;

image_speed = .75;

SideMod = 1;

State = "Inactive";
SightRange = 350;

Aggressiveness = 0;
AttackRange = sprite_width/2+obj_player.sprite_width/2;

TargetX = x;
TargetY = y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var MyPosition = ds_list_find_index(obj_player.EnemyList, id);

if(MyPosition != noone){
    ds_list_delete(obj_player.EnemyList, MyPosition);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>IsHit = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(CurrentHP &lt;= 0){
    score += 50;
    instance_destroy();
}

event_user(0);

switch (State){

    case "Idle":
        event_user(3);
        event_user(1);
        break;

    case "PositionFront":
        SideMod = 1;
        event_user(4);
        event_user(5);
        event_user(3);
        event_user(1);
        break;

    case "PositionBehind":
        SideMod = -1;
        event_user(4);
        event_user(5);
        event_user(3);
        event_user(1);
        break;
        
    case "Hit":
        event_user(3);
        speed = 0;
        break;
        
    case "Queueing":
        event_user(3);
        break;

}

if(OnGround == true){
    GroundY = y;
}


depth = -1*GroundY;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(point_distance(x,y,TargetX,TargetY) &gt;= Speed){
    move_towards_point(TargetX,TargetY,Speed);
}else{
    speed = 0;
}

if(point_distance(x,y,TargetX,TargetY) &lt; 150 &amp;&amp; ds_list_size(obj_player.EnemyList) &lt; 30 &amp;&amp; ds_list_find_index(obj_player.EnemyList,id) == -1){
    ds_list_add(obj_player.EnemyList, id);  
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(point_distance(TargetX,TargetY,obj_player.x,obj_player.y) &gt; AttackRange || point_distance(TargetX,TargetY,obj_player.x,obj_player.y) &lt; 50 || abs(TargetY-obj_player.y) &gt; LayerSize || sign(TargetX-obj_player.x) != sign(SideMod)){
    TargetX = random_range(obj_player.x+40*SideMod, obj_player.x+60*SideMod);
    TargetY = random_range(obj_player.y-3, obj_player.y+3);
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(State){

    case "Idle":

        sprite_index = SPR_BanditIdle;
        break;
        
    case "PositionFront":
    case "PositionBehind":
        if(point_distance(x,y,TargetX,TargetY) &gt; 50){
            image_xscale = sign(TargetX-x);
        }else{
            image_xscale = sign(obj_player.x-TargetX);
        }
        
        if(speed != 0){
            sprite_index = SPR_BanditWalk;
        }else{
            sprite_index = SPR_BanditIdle;
        }
        break;

        
    case "Hit":

        sprite_index = SPR_BanditHit;
        break;

    case "Queueing":
        if(point_distance(x,y,TargetX,TargetY) &gt; 150){
            image_xscale = sign(TargetX-x);
        }else{
            image_xscale = sign(obj_player.x-TargetX);
        }
        
        if(speed != 0){
            sprite_index = SPR_BanditWalk;
        }else{
            sprite_index = SPR_BanditIdle;
        }
        break;


}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if(obj_player.CurrentHP &gt; 0){

    AttackChance = random(100); 

    if((Aggressiveness&gt;.75 &amp;&amp; AttackChance&gt;= 90) || (Aggressiveness&gt;1 &amp;&amp; AttackChance&gt;= 75)){

        sprite_index = SPR_BanditHA;
        MyAttack = instance_create(x,y,obj_bandithatk);

    }
    else{
        sprite_index = SPR_BanditBA;
        MyAttack = instance_create(x,y,object_banditatk);
    
    }
    
    speed = 0;
    State = "Attacking";
    Aggressiveness = 0;
    MyAttack.depth = depth;
    MyAttack.image_xscale = image_xscale;
    MyAttack.image_speed = image_speed;
    MyAttack.Owner = "Bandit";
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(OnGround == true){

    if(distance_to_object(obj_player) &lt;= AttackRange &amp;&amp; abs(y-obj_player.y) &lt; LayerSize){

        Aggressiveness += .02;

        if(random(1) &lt; Aggressiveness*.03){

            event_user(2);

        }

    }

}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var MyAction = floor(random(100));

switch(State){
    
    case "Idle":
        if(distance_to_object(obj_player) &lt; SightRange){
            if(MyAction &lt;= 50){
                State = "PositionBehind";
            }else{
                State = "PositionFront";
            }
        }
        break;
        
    case "PositionFront":
    case "PositionBehind":
    
        if(instance_position(TargetX,TargetY,obj_banditenemy) != noone &amp;&amp; instance_position(TargetX,TargetY,obj_banditenemy) != id){
            if(State == "PositionFront"){
                State = "PositionBehind";
            }else{
                State = "PositionFront";
            }
        }
        
        if(ds_list_size(obj_player.EnemyList) &gt;= 30 &amp;&amp; ds_list_find_index(obj_player.EnemyList,id) == -1){
            State = "Queueing";
            speed = 0;
        }
        break;
    
    case "Queueing":
        if(ds_list_size(obj_player.EnemyList) &lt; 2){
            ds_list_add(obj_player.EnemyList, id);
            if(x &lt; obj_banditenemy.x){
                State = "PositionBehind";
            }else{
                State = "PositionFront";
            }
        }
        break;

}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(State == "Attacking" &amp;&amp; OnGround == true){

    State = "Idle";

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
